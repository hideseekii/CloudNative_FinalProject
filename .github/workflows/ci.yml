name: Django CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-and-format:
    runs-on: ubuntu-latest
    env:
      # COVERAGE_FILE: coverage.xml
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_HOST: localhost
      DB_PORT: 5432

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 方便 git diff 比較

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage==7.4.4

      - name: Check for missing migrations
        id: check_migrations
        run: |
          python manage.py makemigrations --check --dry-run
        continue-on-error: true

      - name: Generate missing migrations (if any)
        if: steps.check_migrations.outcome == 'failure'
        run: |
          echo "⚠️ Migrations are missing. Generating now..."
          python manage.py makemigrations

      - name: Apply migrations
        run: python manage.py migrate
          
      - name: Run tests with coverage
        env:
          # 設定資料庫環境變數，確保 manage.py test 能連上 postgres
          DATABASE_NAME: test_db
          DATABASE_USER: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
        run: |
          rm -f .coverage
          coverage erase
          coverage run --parallel-mode --source='.' manage.py test menu orders reviews
          coverage combine
          coverage report
          coverage xml        # 輸出 coverage.xml 給其他工具使用（如 codecov）
          coverage html       # 輸出 HTML 報告到 htmlcov/

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
        
      - name: Compare coverage (basic)
        run: |
          echo "TODO: Add advanced coverage comparison logic or integrate codecov/coveralls here"
          # 這裡可用第三方工具或自定義腳本做覆蓋率門檻判斷
